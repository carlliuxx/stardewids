name: Build macOS App

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'scripts/**'
      - 'categories.json'
      - 'index.html'
      - 'package.json'
      - '.github/workflows/build-macos.yml'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Update item list
      run: npm run update-item-list

    - name: Build static files
      run: npm run build

    - name: Install Electron and packager
      run: |
        npm install --save-dev electron@latest
        npm install --save-dev electron-packager@latest

    - name: Create Electron main.js
      run: |
        cat > main.js << 'EOF'
        const { app, BrowserWindow } = require('electron');
        const path = require('path');

        function createWindow() {
          const win = new BrowserWindow({
            width: 1200,
            height: 800,
            webPreferences: {
              nodeIntegration: false,
              contextIsolation: true
            },
            icon: path.join(__dirname, 'assets', 'icon.png')
          });

          win.loadFile('index.html');
        }

        app.whenReady().then(() => {
          createWindow();

          app.on('activate', () => {
            if (BrowserWindow.getAllWindows().length === 0) {
              createWindow();
            }
          });
        });

        app.on('window-all-closed', () => {
          if (process.platform !== 'darwin') {
            app.quit();
          }
        });
        EOF

    - name: Update package.json for Electron
      run: |
        node -e "
        const fs = require('fs');
        const package = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        package.main = 'main.js';
        package.productName = 'Stardew IDs';
        fs.writeFileSync('package.json', JSON.stringify(package, null, 2));
        "

    - name: Build macOS app
      run: |
        npx electron-packager . "Stardew IDs" \
          --platform=darwin \
          --arch=x64,arm64 \
          --out=dist-electron \
          --overwrite \
          --app-version=1.0.0 \
          --build-version=1.0.0

    - name: Create DMG installer
      run: |
        # Install create-dmg
        npm install --global create-dmg

        # Create DMG for Intel
        create-dmg "dist-electron/Stardew IDs-darwin-x64/Stardew IDs.app" dist-electron || true
        if [ -f "dist-electron/Stardew IDs 1.0.0.dmg" ]; then
          mv "dist-electron/Stardew IDs 1.0.0.dmg" "dist-electron/StardewIDs-x64.dmg"
        fi

        # Create DMG for Apple Silicon
        create-dmg "dist-electron/Stardew IDs-darwin-arm64/Stardew IDs.app" dist-electron || true
        if [ -f "dist-electron/Stardew IDs 1.0.0.dmg" ]; then
          mv "dist-electron/Stardew IDs 1.0.0.dmg" "dist-electron/StardewIDs-arm64.dmg"
        fi

    - name: Code sign app (if certificate available)
      if: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}
      run: |
        echo "Code signing is configured but not implemented yet"
        # TODO: Implement code signing when certificates are available

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          dist-electron/*.dmg
          dist-electron/Stardew IDs-*/

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-build

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist-electron/*.dmg
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}