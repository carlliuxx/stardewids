name: Build Windows EXE

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'scripts/**'
      - 'categories.json'
      - 'index.html'
      - 'package.json'
      - '.github/workflows/build-windows.yml'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Update item list
      run: npm run update-item-list

    - name: Build static files
      run: npm run build

    - name: Install Electron and builder
      run: |
        npm install --save-dev electron@latest
        npm install --save-dev electron-builder@latest

    - name: Create Electron main.js
      run: |
        @'
        const { app, BrowserWindow } = require('electron');
        const path = require('path');

        function createWindow() {
          const win = new BrowserWindow({
            width: 1200,
            height: 800,
            webPreferences: {
              nodeIntegration: false,
              contextIsolation: true
            },
            icon: path.join(__dirname, 'assets', 'icon.ico')
          });

          win.loadFile('index.html');
        }

        app.whenReady().then(() => {
          createWindow();

          app.on('activate', () => {
            if (BrowserWindow.getAllWindows().length === 0) {
              createWindow();
            }
          });
        });

        app.on('window-all-closed', () => {
          app.quit();
        });
        '@ | Out-File -FilePath main.js -Encoding UTF8

    - name: Create electron-builder config
      run: |
        @'
        {
          "appId": "com.stardewids.app",
          "productName": "Stardew IDs",
          "directories": {
            "output": "dist-electron"
          },
          "files": [
            "**/*",
            "!node_modules/*/{CHANGELOG.md,README.md,README,readme.md,readme}",
            "!node_modules/*/{test,__tests__,tests,powered-test,example,examples}",
            "!node_modules/*.d.ts",
            "!node_modules/.bin",
            "!**/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}",
            "!.editorconfig",
            "!**/._*",
            "!**/{.DS_Store,.git,.hg,.svn,CVS,RCS,SCCS,.gitignore,.gitattributes}",
            "!**/{__pycache__,thumbs.db,.flowconfig,.idea,.vs,.nyc_output}",
            "!**/{appveyor.yml,.travis.yml,circle.yml}",
            "!**/{npm-debug.log,yarn.lock,.yarn-integrity,.yarn-metadata.json}"
          ],
          "win": {
            "target": [
              {
                "target": "nsis",
                "arch": ["x64", "ia32"]
              },
              {
                "target": "portable",
                "arch": ["x64", "ia32"]
              }
            ],
            "icon": "assets/icon.ico"
          },
          "nsis": {
            "oneClick": false,
            "allowToChangeInstallationDirectory": true,
            "installerIcon": "assets/icon.ico",
            "uninstallerIcon": "assets/icon.ico",
            "installerHeaderIcon": "assets/icon.ico",
            "createDesktopShortcut": true,
            "createStartMenuShortcut": true
          }
        }
        '@ | Out-File -FilePath electron-builder.json -Encoding UTF8

    - name: Update package.json
      run: |
        $package = Get-Content package.json | ConvertFrom-Json
        $package.main = "main.js"
        $package.productName = "Stardew IDs"
        $package | ConvertTo-Json -Depth 10 | Set-Content package.json

    - name: Create icon if not exists
      run: |
        if (!(Test-Path "assets/icon.ico")) {
          Write-Host "Icon file not found, using placeholder"
          New-Item -ItemType Directory -Force -Path assets
          # In a real scenario, you would convert PNG to ICO here
        }

    - name: Build Windows executables
      run: npm run electron:build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist-electron/*.exe
          dist-electron/*.exe.blockmap
          dist-electron/win-unpacked/

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist-electron/*.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}